Q2 ADD NUMBERS IN LINKED LIST

CODE:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=null;
        ListNode temp=null;
        int carry=0;
        while(l1!=null||l2!=null)
        {
            int sum=carry;
            if(l1!=null)
            {
                sum+=l1.val;
                l1=l1.next;
            }
            if(l2!=null)
            {
                sum+=l2.val;
                l2=l2.next;
            }
            ListNode node=new ListNode (sum%10);
            carry=sum/10;
            //if this is the first node that is head then we will assign its value as head and temp.
            if(temp==null)
            {
                temp=head=node;
            }
            else{
                temp.next=node;
                temp=temp.next;
            }
        }
        if (carry > 0) {
            temp.next = new ListNode(carry);
        }
    
        
    return head;    
    }
}

APPROACH 
The numbers in each linked list was in rwverse order , that is the digit at position 1 was the ones place, that at 2 was tens place and so on.So at first we took carry as zero 
and then checked if any of the two linked list is not null;if so be the case then we first assign value of carry to sum and then we check for both the linked list to be 
indfivisually not null, if so be the case then we add that value to sum;after then we form a node with value that of sum eqal to its last digit then we find carry and add that 
value to carry ; at the end we check id the carry is not equal to zero , if so then we append this value to the next linked node of the list. finally we return the head.
